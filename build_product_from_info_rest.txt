
         # report_error "command is /$pp_com/ params are /$2/\n";
         post_proc_path=f"{post_proc_dir}/{pp_com}"
         # check for presents and executability of post_proc file.
         # os.access(post_proc_path, os.X_OK)
         if  not os.access(post_proc_path, os.X_OK):
            report_error(f"Formatter Error, could not build {prod_id}, missing post-proc file: {post_proc_path}")
            error_count += 1
            return(0)
         format_cmdline += f" | {post_proc_path} {pp_param} "
         print("format_cmdline: ", format_cmdline)

   format_cmdline += f" > {output_file}.TEMP"
   print("format_cmdline: ", format_cmdline)

   #
   # Issue the command to build into the .TEMP file. This way if
   # we are aborted, the previous output file will remain in place.
   #
   issue_product_build([prod_id,format_cmdline])

   os.system(f"chmod g+w {output_file}.TEMP")

   #
   # Now that we are complete, move the old output file out of the way
   # and rename the TEMP file to the output file.
   # We must defer the abort between these two moves, otherwise we could
   # be left with no output file.
   # os.access('output_file', os.R_OK)

   disable_abort()
   if os.access(output_file, os.R_OK):
      os.system(f"mv {output_file} {old_output_dir}/{prod_id}")
   if os.access(f"{output_file}.TEMP", os.R_OK):
      os.system(f"mv {output_file}.TEMP {output_file}")
   enable_abort()

   #fsize_Arr = []
   print("output_file: ",output_file)
   #fsize_Arr.append(output_file)
   fsize = os.stat(output_file).st_size
   print("fsize: ", fsize)

   if fsize > 0:
      build_time = time.strftime('%Y-%m-%d %H:%M:%S',time.gmtime(time.time()))
      #print(f"""psql -c \"update product_generation_log set build_time = \'{build_time}\', filesize = {fsize} where product_name = \'{prod_id}\';\"""")
      #os.system(f"""psql -c \"update product_generation_log set build_time = \'{build_time}\', filesize = {fsize} where product_name = \'{prod_id}\';\"""")
      print(f"""psql -h skybase-2-dev.cv9bnu4vuygm.us-east-1.rds.amazonaws.com gfsv10 postgres -c \"update product_generation_log set build_time = \'{build_time}\', filesize = {fsize} where product_name = \'{prod_id}\';\"""")
      os.system(f"""psql -h skybase-2-dev.cv9bnu4vuygm.us-east-1.rds.amazonaws.com gfsv10 postgres -c \"update product_generation_log set build_time = \'{build_time}\', filesize = {fsize} where product_name = \'{prod_id}\';\"""")


   archive_cmd = f"{base_path}/bin/archive_product"
   print(f"{base_path}/bin/archive_product")
   if os.access(archive_cmd, os.X_OK):
      os.system(f"{archive_cmd} {output_file}")
